#!/usr/bin/perl
#
# Report users who have not changed their passwords.
#
# Meant to be run locally on a Kerberos KDC with direct access to the
# database, this script generates fast reports of users who have not changed
# their password within some criteria provided on the command line.

use 5.010;
use autodie;
use strict;
use warnings;

use Authen::Kerberos::Kadmin;
use Date::Parse qw(str2time);
use File::Basename qw(basename);
use Getopt::Long qw(GetOptions :config bundling no_ignore_case);

##############################################################################
# User filtering
##############################################################################

# Given a Kerberos database entry, return true if it passes our filters and
# false otherwise.  All times in the configuration parameters are in seconds
# since epoch.
#
# $filter_ref - Reference to a hash describing the filter to apply
#   disabled   - If true, skip disabled users
#   expired    - If true, skip users whose password is already expired
#   lastchange - Skip users with more recent password changes
# $entry      - Authen::Kerberos::Kadmin::Entry object
#
# Returns: true if this entry passes filters, false otherwise
#  Throws: Authen::Kerberos::Exception on errors reading the entry
sub is_entry_included {
    my ($filter_ref, $entry) = @_;
    my $disabled   = $entry->has_attribute('disallow-all-tix');
    my $expires    = $entry->password_expiration;
    my $lastchange = $entry->last_password_change;

    # Check various filter rules.
    if ($filter_ref->{disabled} && $disabled) {
        return;
    } elsif ($filter_ref->{expired} && $expires < time) {
        return;
    } elsif ($filter_ref->{lastchange} > 0) {
        if ($lastchange > $filter_ref->{lastchange}) {
            return;
        }
    }

    # Fell through, include user.
    return 1;
}

# Given a reference to an array of principals and a reference to a filter,
# iterate through the array, filtering out ones that match the filter and
# printing the rest to standard output.
#
# $kadmin         - Authen::Kerberos::Kadmin object
# $principals_ref - Reference to an array of principals
# $filter_ref     - Reference to a hash describing the filter to apply
#   disabled   - If true, skip disabled users
#   exclude    - Exclude users matching this regex
#   expired    - If true, skip users whose password is already expired
#   lastchange - Skip users with more recent password changes
#
# Returns: undef
#  Throws: Authen::Kerberos::Exception on errors reading the entry
#          Text exception on errors writing to standard output
sub filter_users {
    my ($kadmin, $principals_ref, $filter_ref) = @_;

    # Walk through the list of users, skipping any that match the exclude
    # regex if given.
  PRICIPAL:
    for my $principal (@{$principals_ref}) {
        if ($filter_ref->{exclude}) {
            next PRINCIPAL if $principal =~ m{ $filter_ref->{exclude} }xms;
        }

        # Retrieve the entry and run it through the per-entry filter.
        my $entry = $kadmin->get($principal);
        if (is_entry_included($filter_ref, $entry)) {
            say {*STDOUT} $principal
              or die "$0: cannot write to standard output: $!\n";
        }
    }
    return;
}

##############################################################################
# Main routine
##############################################################################

# Flush all output.
STDOUT->autoflush(1);

# Clean up $0 for error reporting.
my $fullpath = $0;
local $0 = basename($0);

# Parse command-line options.
my @options = qw(
  disabled|d exclude|x=s     expired|e
  help|h     last-change|l=s realm|r=s
);
my %config;
if (!GetOptions(\%config, @options)) {
    exit(1);
}
if ($config{help}) {
    print "Feeding myself to perldoc, please wait....\n"
      or die "$0: cannot write to STDOUT: $!\n";
    exec('perldoc', '-t', $fullpath);
}
if (!defined($config{lastchange}) || !defined($config{realm})) {
    die "Usage: $0 -l <last-change-date> -r <realm>\n";
}

# Parse the last changed date.
my $lastchange = str2time($config{lastchange});
if (!defined($lastchange)) {
    die "$0: cannot parse time specification '$lastchange'\n";
}
$config{lastchange} = $lastchange;

# Open the Kerberos database.
my $options = {
    realm  => $config{realm},
    server => 1,
};
my $kadmin = Authen::Kerberos::Kadmin->new($options);

# Retrieve a list of all principals.
my @principals = $kadmin->list(q{*});

# Filter the principals against the configuration and output the ones that
# pass through the filter.
filter_users($kadmin, \@principals, \%config);
exit(0);

__END__

##############################################################################
# Documentation
##############################################################################

=for stopwords
Allbery -deh Heimdal KDC UTC regex CPAN

=head1 NAME

password-change-report - Report users who have not changed their passwords

=head1 SYNOPSIS

B<password-change-report> [B<-deh>] [B<-x> I<exclude-pattern>]
    B<-l> I<last-change> B<-r> I<realm>

=head1 REQUIREMENTS

Authen::Kerberos::Kadmin, a Heimdal KDC database and read access to it, and
the Date::Parse module.

=head1 DESCRIPTION

B<password-change-report> looks through a local KDC database for the realm
specified via the B<-r> option and finds all users who have not changed
their password since the time specified with B<-l>.  The time will be
parsed with the Date::Parse module using its defaults, which means that it
will assume times in the local time zone unless a time zone is specified
in the date format.  (Note that Heimdal's default C<examine> command
reports times in UTC.)

Each principal in the Kerberos KDC database whose keys have not changed
since that time (and which is not excluded by one of the other options)
will be printed to standard output, one principal per line.

=head1 OPTIONS

=over 4

=item B<-d>, B<--disabled>

Exclude principals that are disabled (have the C<disallow-all-tix>
attribute set on the database entry).

=item B<-x> I<regex>, B<--exclude>=I<regex>

Exclude principals that match the regular expression I<regex>.  For
example, depending on your local naming conventions, one way to exclude
all service principals with random keys might be C<-x />, which excludes
all principals containing a C</> in the name.

=item B<-e>, B<--expired>

Exclude all principals with expired passwords.

=item B<-h>, B<--help>

Print out this documentation (which is done simply by feeding the script
to C<perldoc -t>).

=item B<-l> I<date>, B<--last-change> I<date>

Exclude all principals whose keys were changed after I<date>, where
I<date> is a date and time in some format that Date::Parse can understand.
I<date> will be parsed using the Date::Parse defaults, which means that it
will be assumed to be in the local time zone unless it includes time zone
information.  Be aware that Heimdal normally displays dates in UTC.

This option is required.

=item B<-r> I<realm>, B<--realm> I<realm>

The realm of principals to report on.

This option is required.

=back

=head1 SEE ALSO

L<Date::Parse>

This script is an example in the Authen::Kerberos distribution, available
from its web site at <http://www.eyrie.org/~eagle/software/perl-kerberos/>
or from CPAN.

=head1 AUTHORS

Russ Allbery <rra@cpan.org>

=head1 COPYRIGHT AND LICENSE

Copyright 2014 The Board of Trustees of the Leland Stanford Junior
University

This program is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.

=cut
